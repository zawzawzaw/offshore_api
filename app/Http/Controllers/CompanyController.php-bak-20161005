<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Keypersonnel;
use App\Service;
use App\Company;
use App\CompanyType;
use App\Director;
use App\Secretary;
use App\Shareholder;
use App\ServiceCountry;
use App\CompanyWpuserShareholder;
use App\CompanyWpuserDirector;
use App\CompanyWpuserSecretary;
use App\CompanyWpuser;
use App\Country;
use App\Wpuser;
use App\InformationService;
use App\Http\Requests;
use App\Http\Controllers\Controller;
Use DB;

class CompanyController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        //
    	// DB::enableQueryLog();
        // DB::getQueryLog();

        $companies = Company::with('companytypes')->where('shelf', 1)->get();   

        foreach ($companies as $key => $company) {
            $company_wpusers = $company->wpusers()->get();
            if($company_wpusers) $company->company_wpusers = $company_wpusers;
        }

        return view('company.index', ['companies'=>$companies]);            
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    	$company_types = CompanyType::orderBy('name', 'ASC')->lists('name', 'id');        

        return view('company.create', ['company_types'=>$company_types]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {       

        // return $request->all();

        if($request->ajax() || $request->callback) {

            $user_id = $request->user_id;
            $unique_id = $request->unique_id;

            if(empty($user_id) || $user_id==0) { // for unregistered user testing
                $user_id = 1;
            }

            $company_id = $request->shelf_company_id;

            if(empty($company_id)) { // if not shelf create new company

                $saved_company_id = $request->saved_company_id;

                if($saved_company_id) {
                    $company = Company::find($saved_company_id);    
                }else {
                    $company = new Company;                
                }                          
                $company->name = implode(", ", $request->company_name_choices);
                $company->incorporation_date = "";
                $company->price = 0;
                $company->price_eu = 0;
                $company->shelf = 0;
                $company->company_type_id = $request->jurisdiction_id;                
                $company->save();  

                $company_id = $company->id;
            }            

            if(!empty($user_id) && !empty($company_id) && $user_id!==0):

                $company = Company::find($company_id);
                // $company->renewal_date = date('Y-m-d H:i:s', strtotime(date("Y-m-d", time()) . " + 365 day"));
                // $wpuser = Wpuser::find($user_id);
                // $company->wpuser()->associate($wpuser);

                // if(!empty($request->nominee_director_annual_fee)) {
                //     $company->nominee_director = 1;
                // }
                // if(!empty($request->nominee_shareholder_annual_fee)) {
                //     $company->nominee_shareholder = 1;
                // }
                // if(!empty($request->nominee_secretary_annual_fee)) {
                //     $company->nominee_secretary = 1;
                // }


                $renewal_date = date('Y-m-d H:i:s', strtotime(date("Y-m-d", time()) . " + 365 day"));
                if(!empty($request->nominee_director_annual_fee)) $nominee_director = 1;
                else $nominee_director = 0;

                if(!empty($request->nominee_shareholder_annual_fee)) $nominee_shareholder = 1;
                else $nominee_shareholder = 0;

                if(!empty($request->nominee_secretary_annual_fee)) $nominee_secretary = 1;
                else $nominee_secretary = 0;

                // check if this user already saved this company
                $company_wpuser = $company->wpusers()->where('wpuser_id', $user_id)->first();

                if(count($company_wpuser)>0) {

                    // delete if any old shareholders saved
                    $companyshareholders = CompanyWpuser::find($company_wpuser->pivot->id)->companywpuser_shareholders()->get();
                    if($companyshareholders) CompanyWpuser::find($company_wpuser->pivot->id)->companywpuser_shareholders()->delete();

                    // delete if any old directors saved
                    $companydirectors = CompanyWpuser::find($company_wpuser->pivot->id)->companywpuser_directors()->get();
                    if($companydirectors) CompanyWpuser::find($company_wpuser->pivot->id)->companywpuser_directors()->delete();

                    // delete if any old secretaries saved
                    $companysecretaries = CompanyWpuser::find($company_wpuser->pivot->id)->companywpuser_secretaries()->get();
                    if($companysecretaries) CompanyWpuser::find($company_wpuser->pivot->id)->companywpuser_secretaries()->delete();

                    // delete if any old services saved
                    $servicescountries = CompanyWpuser::find($company_wpuser->pivot->id)->servicescountries()->get();
                    if($servicescountries) CompanyWpuser::find($company_wpuser->pivot->id)->servicescountries()->detach();                    

                    // delete if any old infoservices saved
                    $informationservices = CompanyWpuser::find($company_wpuser->pivot->id)->informationservices()->get();
                    if($informationservices) CompanyWpuser::find($company_wpuser->pivot->id)->informationservices()->detach();                    

                    $company->wpusers()->detach($user_id); // if its saved remove pivot saved by that user first for overwritting purpose

                }

                $company->wpusers()->attach($user_id, ['renewal_date'=>$renewal_date, 'nominee_director'=>$nominee_director, 'nominee_shareholder'=>$nominee_shareholder, 'nominee_secretary'=>$nominee_secretary, 'request_id'=>$request->request_id, 'parent_transaction_id'=>$request->parent_transaction_id]); // enter new pivot data for that user
                
                $company_wpuser = $company->wpusers()->where('wpuser_id', $user_id)->first(); // get currently saved pivot id

                $company_wpuser_id = $company_wpuser->pivot->id;

                $directors = array();
                $secretaries = array();
                $shareholders = array();

                $companywpuser_directors = array();
                $companywpuser_secretaries = array();
                $companywpuser_shareholders = array();

                $incomplete = false;         

                // delete if any old shareholders saved
                // $companyshareholders = $company->companyshareholders()->get(); // to remove
                // if($companyshareholders) $company->companyshareholders()->delete(); // to remove
            
                for($i=1;$i<=$request->shareholder_count;$i++) {                
                    $name = $request->input('shareholder_'.$i.'_name');
                    $type = $request->input('shareholder_'.$i.'_type');
                    $address = $request->input('shareholder_'.$i.'_address');
                    $address_2 = $request->input('shareholder_'.$i.'_address_2');
                    $address_3 = $request->input('shareholder_'.$i.'_address_3');
                    $address_4 = $request->input('shareholder_'.$i.'_address_4');
                    $address_5 = $request->input('shareholder_'.$i.'_address_5');
                    $telephone = $request->input('shareholder_'.$i.'_telephone');
                    $passport = $request->input('shareholder_'.$i.'_passport');
                    $bill = $request->input('shareholder_'.$i.'_bill');
                    $amount = $request->input('shareholder_'.$i.'_amount');

                    if(empty($passport) || empty($bill)) {
                        $incomplete = true;
                    }

                    // $shareholders[] = new CompanyShareholder(['name'=>$name, 'type'=>$type, 'address'=>$address, 'address_2'=>$address_2, 'address_3'=>$address_3, 'address_4'=>$address_4, 'telephone'=>$telephone, 'passport'=>$passport, 'bill'=>$bill, 'share_amount'=>$amount]); // to remove

                    $companywpuser_shareholders[] = new CompanyWpuserShareholder(['name'=>$name, 'type'=>$type, 'address'=>$address, 'address_2'=>$address_2, 'address_3'=>$address_3, 'address_4'=>$address_4, 'address_5'=>$address_5, 'telephone'=>$telephone, 'passport'=>$passport, 'bill'=>$bill, 'share_amount'=>$amount]);
                }                

                // $company->companyshareholders()->saveMany($shareholders); // to remove

                // find with currently saved companyuser pivot id

                $company_wpuser = CompanyWpuser::find($company_wpuser_id); 

                // save shareholders for that user and company

                $company_wpuser->companywpuser_shareholders()->saveMany($companywpuser_shareholders);
                
                // delete if any old directors saved
                // $companydirectors = $company->companydirectors()->get(); // to remove
                // if($companydirectors) $company->companydirectors()->delete(); // to remove
                
                for($i=1;$i<=$request->director_count;$i++) {                
                    $name = $request->input('director_'.$i.'_name');
                    $type = $request->input('director_'.$i.'_type');
                    $address = $request->input('director_'.$i.'_address');
                    $address_2 = $request->input('director_'.$i.'_address_2');
                    $address_3 = $request->input('director_'.$i.'_address_3');
                    $address_4 = $request->input('director_'.$i.'_address_4');
                    $address_5 = $request->input('director_'.$i.'_address_5');
                    $telephone = $request->input('director_'.$i.'_telephone');
                    $passport = $request->input('director_'.$i.'_passport');
                    $bill = $request->input('director_'.$i.'_bill');

                    if(empty($passport) || empty($bill)) {
                        $incomplete = true;
                    }                    

                    // $directors[] = new CompanyDirector(['name'=>$name, 'type'=>$type, 'address'=>$address, 'address_2'=>$address_2, 'address_3'=>$address_3, 'address_3'=>$address_3, 'address_4'=>$address_4, 'telephone'=>$telephone, 'passport'=>$passport, 'bill'=>$bill]);

                    $companywpuser_directors[] = new CompanyWpuserDirector(['name'=>$name, 'type'=>$type, 'address'=>$address, 'address_2'=>$address_2, 'address_3'=>$address_3, 'address_3'=>$address_3, 'address_4'=>$address_4, 'address_5'=>$address_5, 'telephone'=>$telephone, 'passport'=>$passport, 'bill'=>$bill]);
                }

                // $company->companydirectors()->saveMany($directors); // to remove

                // find with currently saved companyuser pivot id and save directors for that user and company

                $company_wpuser->companywpuser_directors()->saveMany($companywpuser_directors);

                // delete if any old secretaries saved
                // $companysecretaries = $company->companysecretaries()->get(); 
                // if($companysecretaries) $company->companysecretaries()->delete();
                   
                for($i=1;$i<=$request->secretary_count;$i++) {                
                    $name = $request->input('secretary_'.$i.'_name');
                    $type = $request->input('secretary_'.$i.'_type');
                    $address = $request->input('secretary_'.$i.'_address');
                    $address_2 = $request->input('secretary_'.$i.'_address_2');
                    $address_3 = $request->input('secretary_'.$i.'_address_3');
                    $address_4 = $request->input('secretary_'.$i.'_address_4');
                    $address_5 = $request->input('secretary_'.$i.'_address_5');
                    $telephone = $request->input('secretary_'.$i.'_telephone');
                    $passport = $request->input('secretary_'.$i.'_passport');
                    $bill = $request->input('secretary_'.$i.'_bill');

                    if(empty($passport) || empty($bill)) {
                        $incomplete = true;
                    }

                    // $secretaries[] = new CompanySecretary(['name'=>$name, 'type'=>$type, 'address'=>$address, 'address_2'=>$address_2, 'address_3'=>$address_3, 'address_3'=>$address_3, 'address_4'=>$address_4, 'telephone'=>$telephone, 'passport'=>$passport, 'bill'=>$bill]);

                    $companywpuser_secretaries[] = new CompanyWpuserSecretary(['name'=>$name, 'type'=>$type, 'address'=>$address, 'address_2'=>$address_2, 'address_3'=>$address_3, 'address_3'=>$address_3, 'address_4'=>$address_4, 'address_5'=>$address_5, 'telephone'=>$telephone, 'passport'=>$passport, 'bill'=>$bill]);

                }
                
                // $company->companysecretaries()->saveMany($secretaries);

                // find with currently saved companyuser pivot id and save directors for that user and company

                $company_wpuser->companywpuser_secretaries()->saveMany($companywpuser_secretaries);
                
                // if any old services
                // $servicescountries = $company->servicescountries()->get(); // to remove
                // if($servicescountries) $company->servicescountries()->detach(); // to remove

                $currency = $request->input('currency');

                $service_price = 0;
                for($i=1;$i<=$request->service_count;$i++) {
                    $service_country_count = $request->input('service_'.$i.'_country_count');

                    for($j=1;$j<=$service_country_count;$j++) {
                        $service_country_id = $request->input('service_'.$i.'_country_'.$j.'_id'); 
                        $credit_card_count = ($request->input('service_'.$i.'_country_'.$j.'_no_of_card')) ? $request->input('service_'.$i.'_country_'.$j.'_no_of_card') : "";

                        // $company->servicescountries()->attach($service_country_id, ['credit_card_count'=>$credit_card_count]); // to remove

                        if($currency=="USD")
                            $each_service_price = ServiceCountry::find($service_country_id)->price;
                        else
                            $each_service_price = ServiceCountry::find($service_country_id)->price_eu;

                        if($credit_card_count) {
                            $service_price += $each_service_price * $credit_card_count;
                        }
                        else $service_price += $each_service_price;

                        $company_wpuser->servicescountries()->attach($service_country_id, ['credit_card_count'=>$credit_card_count]);
                    }
                }

                $info_services_ids = $request->info_services_id;
                $company_info_services = array();

                if($info_services_ids) {
                    // if any old info services
                    // $informationservices = $company->informationservice()->get(); // to remove
                    // if($informationservices) $company->informationservice()->detach(); // to remove
                        
                    foreach ($info_services_ids as $key => $value) {
                        // $company->informationservice()->attach($value); // to remove

                        $company_wpuser->informationservices()->attach($value);
                    }
                }

                // get all price from db 
                $nominee_director_prices = Director::select('price', 'price_eu')->where('company_type_id', $request->jurisdiction_id)->first();
                $nominee_secretary_prices = Secretary::select('price', 'price_eu')->where('company_type_id', $request->jurisdiction_id)->first();
                $nominee_shareholder_prices = Shareholder::select('price', 'price_eu')->where('company_type_id', $request->jurisdiction_id)->first();                                
                
                $total_price = 0;  

                if($currency == "USD") {
                    $nominee_director_price = $nominee_director_prices->price;
                    $nominee_secretary_price = $nominee_secretary_prices->price;
                    $nominee_shareholder_price = $nominee_shareholder_prices->price;
                }else {
                    $nominee_director_price = $nominee_director_prices->price_eu;
                    $nominee_secretary_price = $nominee_secretary_prices->price_eu;
                    $nominee_shareholder_price = $nominee_shareholder_prices->price_eu;
                }

                $total_price += ($nominee_director) ? $nominee_director_price : 0;
                $total_price += ($nominee_secretary) ? $nominee_secretary_price : 0;
                $total_price += ($nominee_shareholder) ? $nominee_shareholder_price : 0;

                if(!empty($request->shelf_company_id)) {
                    if($currency=="USD")
                        $total_price += ($company->price);
                    else
                        $total_price += ($company->price_eu);
                }else {
                    if($currency=="USD")
                        $total_price += CompanyType::find($request->jurisdiction_id)->price;
                    else
                        $total_price += CompanyType::find($request->jurisdiction_id)->price_eu;
                }

                if($service_price) {
                    $total_price += $service_price;
                }

                $company->wpusers()->updateExistingPivot($user_id, ['amount'=>$total_price]); // update amount;

                if($request->action=='checkout'){

                    $company = Company::find($company_id);                    

                    if($company->status==1 || $company->status==2) {  // if company is already registered                        
                        return response()->json(['message' => 'This company is already registered!'], 200)->setCallback($request->input('callback'));    
                    } else {                        
                        $company->code = "Pending";
                        $company->status = 1;
                        // $company->renewal_date = date('Y-m-d H:i:s', strtotime(date("Y-m-d", time()) . " + 365 day"));
                        $company->save();

                        $company_wpuser = CompanyWpuser::find($company_wpuser_id);
                        $company_wpuser->status = 1;                    
                        $company_wpuser->save();

                        $wpuser_ids = CompanyWpuser::select('wpuser_id')->where("company_id", $company_id)->where("status", 0)->get();

                        // $amount = number_format($total_price, 2, '.', '');
                        // $refno = $user_id.$unique_id;
                        // $secretkey = "3me1sk10t1RaM0La";
                        // $transactionKey = sha1($currency.$amount.$refno.$secretkey);

                        $username = Wpuser::find($user_id);
                        $company_type = CompanyType::find($request->jurisdiction_id);

                        $to      = 'ocsint@ocsonline.biz';
                        $subject = 'New company formation order notification';
                        $message = '
                        <html>
                        <head>
                          <title>New company formation order notification</title>
                        </head>
                        <body>
                          <p>The following company formation order has been received:</p>
                          <table>
                            <tr><td>Username :</td><td>'.$username->display_name.'</td></tr>
                            <tr><td>Email :</td><td>'.$username->user_email.'</td></tr>
                            <tr><td>Company name :</td><td>'.$company->name.'</td></tr>
                            <tr><td>Jurisdiction :</td><td>'.$company_type->jurisdiction.'</td></tr>
                            <tr><td>Company type :</td><td>'.$company_type->name.'</td></tr>';
                        
                        for($i=1;$i<=$request->shareholder_count;$i++) {                
                            $message .= '<tr><td><br></td></tr><tr><td>Shareholder '.$i.'</td></tr>';
                            $message .= '<tr><td>Beneficial owner:</td><td>'.$request->input('shareholder_'.$i.'_name').'</td></tr>';
                            $message .= '<tr><td style="vertical-align:top;">Address:</td><td>'.$request->input('shareholder_'.$i.'_address').'<br>'.$request->input('shareholder_'.$i.'_address_2').'<br>'.$request->input('shareholder_'.$i.'_address_3').'<br>'.$request->input('shareholder_'.$i.'_address_4').'<br>'.$request->input('shareholder_'.$i.'_address_5').'</td></tr>';
                            $message .= '<tr><td>Telephone:</td><td>'.$request->input('shareholder_'.$i.'_telephone').'</td></tr>';
                            $message .= '<tr><td>Number of shares:</td><td>'.$request->input('shareholder_'.$i.'_amount').'</td></tr>';
                        }

                        for($i=1;$i<=$request->director_count;$i++) { 
                            $message .= '<tr><td><br></td></tr><tr><td>Director '.$i.'</td></tr>';
                            $message .= '<tr><td>Director:</td><td>'.$request->input('director_'.$i.'_name').'</td></tr>';
                            $message .= '<tr><td style="vertical-align:top;">Address:</td><td>'.$request->input('director_'.$i.'_address').'<br>'.$request->input('director_'.$i.'_address_2').'<br>'.$request->input('director_'.$i.'_address_3').'<br>'.$request->input('director_'.$i.'_address_4').'<br>'.$request->input('director_'.$i.'_address_5').'</td></tr>';
                            $message .= '<tr><td>Telephone:</td><td>'.$request->input('director_'.$i.'_telephone').'</td></tr>';
                        }

                        for($i=1;$i<=$request->secretary_count;$i++) {  
                            $message .= '<tr><td><br></td></tr><tr><td></td></tr><tr><td>Secretary '.$i.'</td></tr>';
                            $message .= '<tr><td>Secretary:</td><td>'.$request->input('secretary_'.$i.'_name').'</td></tr>';
                            $message .= '<tr><td style="vertical-align:top;">Address:</td><td>'.$request->input('secretary_'.$i.'_address').'<br>'.$request->input('secretary_'.$i.'_address_2').'<br>'.$request->input('secretary_'.$i.'_address_3').'<br>'.$request->input('secretary_'.$i.'_address_4').'<br>'.$request->input('secretary_'.$i.'_address_5').'</td></tr>';
                            $message .= '<tr><td>Telephone:</td><td>'.$request->input('secretary_'.$i.'_telephone').'</td></tr>';              
                        }

                        $message .= '                                
                          </table>
                        </body>
                        </html>
                        ';
                        // To send HTML mail, the Content-type header must be set
                        $headers  = 'MIME-Version: 1.0' . "\r\n";
                        $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";
                        $headers .= 'From: OCS Reception <no-reply@offshorecompanysolutions.com>' . "\r\n" .
                            'Reply-To: no-reply@offshorecompanysolutions.com' . "\r\n" .
                            'X-Mailer: PHP/' . phpversion();

                        mail($to, $subject, $message, $headers);


                        // return response()->json(['message' => 'Successfully submitted!', 'response' => $wpuser_ids, 'tkey' => $transactionKey, 'currency' => $currency, 'amount' => $amount, 'refno' => $refno, 'secretkey' => $secretkey], 200)->setCallback($request->input('callback'));    

                        return response()->json(['message' => 'Successfully submitted!', 'response' => $wpuser_ids], 200)->setCallback($request->input('callback'));    
                    }                    

                }else {                    

                    return response()->json(['message' => 'Successfully saved!', 'response' => $request->all()], 200)->setCallback($request->input('callback'));
                }               

            else:

                return response()->json(['message' => 'missing required fields'], 412);

            endif;

        }else {

            // return strtotime();

            if(!empty($request->company_name) && !empty($request->company_incorporation_date) && !empty($request->company_type) && !empty($request->company_price)) {
                $company = new Company();
                $company->code = $request->code;
                $company->name = $request->company_name;
                // $company_incorporation_date = date_create_from_format('d/m/y', $request->company_incorporation_date);
                // $company->incorporation_date = date_format($company_incorporation_date, 'Y-m-d');
                $company->incorporation_date = date('Y-m-d', strtotime($this->replaceDateFormat($request->company_incorporation_date)));
                $company->price = (double) preg_replace("/[.,]/", "", $request->company_price);
                $company->price_eu = (double) preg_replace("/[.,]/", "", $request->company_price_eu);
                $company->shelf = 1;
                $company->company_type_id = $request->company_type;
                $company->save();
            }

            return redirect('officiumtutus/company');
        }  	

        // foreach($request->services as $key => $service_id) {
        //     $company->services()->attach($service_id);
        // }

        // if(!empty($request->shareholders)){        
        //     foreach ($request->shareholders as $key => $shareholder_id) {
        //         $company->keypersonnel()->attach($shareholder_id, ['share_amount' => $request->input('shareholder_'.$shareholder_id.'_share_amount')]);
        //     }
        // }

        // if(!empty($request->directors)){
        //     foreach ($request->directors as $key => $director_id) {            
        //         $company->keypersonnel()->attach($director_id);
        //     }
        // }
        
        // if(!empty($request->secretaries)){
        //     foreach ($request->secretaries as $key => $secretary_id) {
        //         $company->keypersonnel()->attach($secretary_id);
        //     }
        // }    	

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request, $id)
    {
        //              
        return $id;
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
        $company = Company::find($id);
        // return $company;

        $company_types = CompanyType::lists('name', 'id');        

        return view('company.edit', ['company'=>$company, 'company_types'=>$company_types]);
    }

    private function replaceDateFormat($value) {
        return str_replace('/', '-', $value);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
        $company = Company::find($id);

        $company->code = $request->code;
        $company->name = $request->company_name;    
        // $company_incorporation_date = date_create_from_format('d/m/y', $request->company_incorporation_date);
        // $company->incorporation_date = date_format($company_incorporation_date, 'Y-m-d');
        $company->incorporation_date = date('Y-m-d', strtotime($this->replaceDateFormat($request->company_incorporation_date)));
        $company->price_eu = (double) preg_replace("/[.,]/", "", $request->company_price_eu);
        $company->price = (double) preg_replace("/[.,]/", "", $request->company_price);
        $company->company_type_id = $request->company_type;
        $company->save();

        return redirect('officiumtutus/company');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
        $ids = explode(',', $id);

        $affectedRows = false;

        foreach ($ids as $key => $each_id) {
            $company = Company::find($each_id);

            if($company->wpuser_id==NULL) {
                $affectedRows = $company->delete();
            }else {
                $error = "There is a user subscribed under this company";                
            }   
        }

        if($affectedRows) {
            return response()->json(['message' => 'Successfully deleted'], 200);    
        }else {
            return response()->json(['message' => 'Request failed', 'error' => $error], 412);    
        }
    }
}


